<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-4.3.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
	http://www.springframework.org/schema/mvc 
	http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-4.3.xsd
	http://www.springframework.org/schema/util
	http://www.springframework.org/schema/util/spring-util-4.3.xsd
	http://www.springframework.org/schema/task 
	http://www.springframework.org/schema/task/spring-task-4.3.xsd
	http://www.springframework.org/schema/cache
    http://www.springframework.org/schema/cache/spring-cache.xsd">

	<context:component-scan base-package="com.shiro.*"/>  
	
	<aop:aspectj-autoproxy proxy-target-class="true" />
	
	<context:property-placeholder location="classpath:jdbc.properties"/>
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.master.driver}" />
		<property name="url" value="${jdbc.master.url}" />
		<property name="username" value="${jdbc.master.username}" />
		<property name="password" value="${jdbc.master.password}" />
		 <property name="initialSize" value="20" />  
        <property name="minIdle" value="20" />  
        <property name="maxActive" value="100" />  
        <!-- 配置获取连接等待超时的时间   -->
        <property name="maxWait" value="60000" />  
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
        <property name="timeBetweenEvictionRunsMillis" value="3600000" />  
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
        <property name="minEvictableIdleTimeMillis" value="300000" />  
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小   -->
        <property name="poolPreparedStatements" value="true" />  
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> 
        
        <property name="defaultAutoCommit" value="false" />
         <!--  注意如果要用log4j一定要加上log4j -->
        <property name="filters" value="stat,log4j" /> 
	</bean>

	
	<!--MyBatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="mapperLocations" value="classpath:mapper/*Mapper.xml" />
	</bean>
	
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	<!-- 配置mybatis mapper接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.shiro.mapper" />
		<property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate" />
	</bean>	
	 
	

	<!-- JDBC事务 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
  
<!-- 	定义通知 -->  
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="find*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="select*" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice> 
	
<!--    开启注解式事务控制 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

<!-- 定义AOP切面处理器 -->
	<aop:config proxy-target-class="true">
		<aop:pointcut id="interceptorPointCuts"
			expression="execution(* com.shiro.service.impl.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="interceptorPointCuts" />
	</aop:config>
	<!-- 开启事务注解 -->
	<task:annotation-driven />
	<context:annotation-config/>
	<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />

 

	<!-- security安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="myRealm" />
		<!-- 缓存管理器 -->
		<property name="cacheManager" ref="cacheManager"/>
  		<property name="sessionManager" ref="sessionManager"/>
	</bean>
<!-- 	自定义Realm -->
	<bean id="myRealm" class="com.shiro.realm.MyRealm" >
	 	 <!-- 依赖凭证匹配器 -->
	 	<property name="credentialsMatcher"> 
	 		<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher"> 
		 	<!-- 加密的方式 --> 
			 <constructor-arg index="0" type="java.lang.String" value="MD5" /> 
			 <!-- 加密的次数，默认是1次 --> 
			 <property name="hashIterations" value="1024"/> 
			 </bean> 
	 	</property>
	 	 <!--启用缓存，默认关闭-->
        <property name="cachingEnabled" value="true"/>
        <!--启用身份验证缓存，即缓存AuthenticationInfo，默认false-->
        <property name="authenticationCachingEnabled" value="true"/>
        <property name="authenticationCacheName" value="authenticationCache"/>
        <!--启用授权缓存，即缓存AuthorizationInfo的信息，默认为false-->
        <property name="authorizationCachingEnabled" value="true"/>
        <property name="authorizationCacheName" value="authorizationCache"/>	 	
	 </bean> 


	<!-- 缓存管理器 -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:shiro-ehcache.xml" />
	</bean>

	<!-- 定义会话管理器的操作 -->
 	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager"> 
 	   <!--删除在session过期时跳转页面时自动在URL中添加JSESSIONID-->
        <property name="sessionIdUrlRewritingEnabled" value="false" /> 	
		<!-- 定义的是全局的session会话超时时间，此操作会覆盖web.xml文件中的超时时间配置 -->
		<property name="globalSessionTimeout" value="1000000" />
		<!-- 删除所有无效的Session对象，此时的session被保存在了内存里面 -->
		<property name="deleteInvalidSessions" value="true" /> 
		<!-- 定义要使用的无效的Session定时调度器 -->
	<!-- 	<property name="sessionValidationScheduler" ref="sessionValidationScheduler" />  -->
		<!-- 需要让此session可以使用该定时调度器进行检测 -->
	<!-- 	<property name="sessionValidationSchedulerEnabled" value="true" /> -->
		 <!-- 定义Session可以进行序列化的工具类 -->
		<property name="sessionDAO" ref="sessionDAO" /> 
		 <!-- 定义sessionIdCookie模版可以进行操作的启用 -->
		<!-- <property name="sessionIdCookieEnabled" value="true" /> -->
	</bean> 

	<!-- 配置Session DAO的操作处理 -->
 	<bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO"> 
		<!-- 设置session缓存的名字，这个名字可以任意 -->
		<property name="activeSessionsCacheName" value="shiro-activeSessionCache" /> 
		<!-- 定义该Session DAO操作中所使用的ID生成器 -->
		<property name="sessionIdGenerator" ref="sessionIdGenerator" />
	</bean>

	<!-- 定义Session ID生成管理器 --> 
	<bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator" />

	<!-- Shiro过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口,这个属性是必须的 -->
		<property name="securityManager" ref="securityManager" />
		<!-- 身份认证失败，则跳转到登录页面的配置 -->
		<property name="loginUrl" value="/static/web/login1.html" />
		<!-- 登录成功挑转的页面 -->
		<property name="successUrl" value="/success.jsp" />
		<!-- 权限认证失败，则跳转到指定页面 -->
		<property name="unauthorizedUrl" value="/static/web/unauthorized.html" />
		<!-- Shiro连接约束配置,即过滤链的定义 -->
		<property name="filterChainDefinitions">
			<value>
			 <!-- anon无权限访问请求，此处是登录页面和登录请求 -->  
				/user/login=anon
				/static/**=anon
				 <!-- 需要权限为add的用户才能访问此请求-->  
              	<!-- /user/addUser=perms[admin:add] -->
                <!-- 需要管理员角色才能访问此页面 -->  
                <!-- /user/addUser=roles[admin] -->
                <!--拦截非静态资源的所有请求-->   
				/*=authc
			</value>
		</property>
	</bean>


</beans>    